// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef ACNSDK_SWIFT_H
#define ACNSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import GoogleMobileAds;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ACNSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIView;
@protocol ACNAdBannerDelegate;
@protocol ACNAdSizeDelegate;
enum ACNAdSize : NSInteger;
@class NSString;
@class UIViewController;

/// The view that displays banner ads. A minimum implementation to get an ad from within a
/// UIViewController class is:
SWIFT_CLASS("_TtC6ACNSDK11ACNAdBanner")
@interface ACNAdBanner : NSObject
@property (nonatomic, strong) UIView * _Null_unspecified bannerView;
/// Optional delegate object that receives state change notifications from this ACNBanner.
/// Typically this is a UIViewController.
@property (nonatomic, weak) id <ACNAdBannerDelegate> _Nullable delegate;
/// Optional delegate that is notified when creatives cause the banner to change size.
@property (nonatomic, weak) id <ACNAdSizeDelegate> _Nullable adSizeDelegate;
/// Init with adSize, adUnitID, rootViewController
/// \param adSize banner view size
///
/// \param adUnitID Example AdMob ad unit ID: @“ca-app-pub-0123456789012345/0123456789”
///
/// \param rootViewController Required reference to a root view controller that is used by the banner to present full screen content after the user interacts with the ad. The root view controller is most commonly the view controller displaying the banner.
///
- (nonnull instancetype)initWithAdSize:(enum ACNAdSize)adSize adUnitID:(NSString * _Nonnull)adUnitID rootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ACNAdRequest;

SWIFT_PROTOCOL("_TtP6ACNSDK17ACNAdLoadProtocol_")
@protocol ACNAdLoadProtocol
- (void)loadRequestWithRequset:(ACNAdRequest * _Nonnull)requset;
@end


@interface ACNAdBanner (SWIFT_EXTENSION(ACNSDK)) <ACNAdLoadProtocol>
/// Makes an ad request. The request object supplies targeting information.
- (void)loadRequestWithRequset:(ACNAdRequest * _Nonnull)requset;
@end

@class GADBannerView;

@interface ACNAdBanner (SWIFT_EXTENSION(ACNSDK)) <GADAdSizeDelegate>
/// Called before the ad view changes to the new size.
- (void)adView:(GADBannerView * _Nonnull)bannerView willChangeAdSizeTo:(GADAdSize)size;
@end


@interface ACNAdBanner (SWIFT_EXTENSION(ACNSDK)) <GADBannerViewDelegate>
/// Tells the delegate that an ad request successfully received an ad. The delegate may want to add
/// the banner view to the view hierarchy if it hasn’t been added yet.
- (void)bannerViewDidReceiveAd:(GADBannerView * _Nonnull)bannerView;
/// Tells the delegate that an ad request failed. The failure is normally due to network
/// connectivity or ad availablility (i.e., no fill).
- (void)bannerView:(GADBannerView * _Nonnull)bannerView didFailToReceiveAdWithError:(NSError * _Nonnull)error;
/// Tells the delegate that an impression has been recorded for an ad.
- (void)bannerViewDidRecordImpression:(GADBannerView * _Nonnull)bannerView;
/// Tells the delegate that a click has been recorded for the ad.
- (void)bannerViewDidRecordClick:(GADBannerView * _Nonnull)bannerView;
/// Tells the delegate that a full screen view will be presented in response to the user clicking on
/// an ad. The delegate may want to pause animations and time sensitive interactions.
- (void)bannerViewWillPresentScreen:(GADBannerView * _Nonnull)bannerView;
/// Tells the delegate that the full screen view will be dismissed.
- (void)bannerViewWillDismissScreen:(GADBannerView * _Nonnull)bannerView;
/// Tells the delegate that the full screen view has been dismissed. The delegate should restart
/// anything paused while handling bannerViewWillPresentScreen:.
- (void)bannerViewDidDismissScreen:(GADBannerView * _Nonnull)bannerView;
@end


SWIFT_PROTOCOL("_TtP6ACNSDK19ACNAdBannerDelegate_")
@protocol ACNAdBannerDelegate
@optional
/// Tells the delegate that an ad request successfully received an ad. The delegate may want to add
/// the banner view to the view hierarchy if it hasn’t been added yet.
- (void)bannerViewDidReceiveAd:(ACNAdBanner * _Nonnull)banner;
/// Tells the delegate that an ad request failed. The failure is normally due to network
/// connectivity or ad availablility (i.e., no fill).
- (void)bannerView:(ACNAdBanner * _Nonnull)banner didFailToReceiveAdWithError:(NSError * _Nonnull)error;
/// Tells the delegate that an impression has been recorded for an ad.
- (void)bannerViewDidRecordImpressionWithBanner:(ACNAdBanner * _Nonnull)banner;
/// Tells the delegate that a click has been recorded for the ad.
- (void)bannerViewDidRecordClickWithBanner:(ACNAdBanner * _Nonnull)banner;
/// Tells the delegate that a full screen view will be presented in response to the user clicking on
/// an ad. The delegate may want to pause animations and time sensitive interactions.
- (void)bannerViewWillPresentScreenWithBanner:(ACNAdBanner * _Nonnull)banner;
/// Tells the delegate that the full screen view will be dismissed.
- (void)bannerViewWillDismissScreenWithBanner:(ACNAdBanner * _Nonnull)banner;
/// Tells the delegate that the full screen view has been dismissed. The delegate should restart
/// anything paused while handling bannerViewWillPresentScreen:.
- (void)bannerViewDidDismissScreenWithBanner:(ACNAdBanner * _Nonnull)banner;
@end

@protocol ACNAdInterstitialDelegate;
@class NSNumber;

SWIFT_CLASS("_TtC6ACNSDK17ACNAdInterstitial")
@interface ACNAdInterstitial : NSObject
/// Optional delegate object that receives state change notifications from this GADInterstitalAd.
@property (nonatomic, weak) id <ACNAdInterstitialDelegate> _Nullable delegate;
/// Initializes an interstitial with an ad unit created on the AdMob website. Create a new ad unit
/// for every unique placement of an ad in your application. Set this to the ID assigned for this
/// placement. Ad units are important for targeting and statistics.
/// Example AdMob ad unit ID: @“ca-app-pub-0123456789012345/0123456789”
- (nonnull instancetype)initWithAdUnitID:(NSString * _Nonnull)adUnitID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) BOOL isReady;
/// Loads an interstitial ad.
- (void)loadRequestWithRequset:(ACNAdRequest * _Nonnull)requset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ACNAdInterstitial (SWIFT_EXTENSION(ACNSDK))
/// Presents the interstitial ad. Must be called on the main thread.
/// @param rootViewController A view controller to present the ad.
- (void)presentWithRootViewController:(UIViewController * _Nonnull)rootViewController;
@end

@protocol GADFullScreenPresentingAd;

@interface ACNAdInterstitial (SWIFT_EXTENSION(ACNSDK)) <GADFullScreenContentDelegate>
- (void)adDidRecordImpression:(id <GADFullScreenPresentingAd> _Nonnull)ad;
- (void)adDidRecordClick:(id <GADFullScreenPresentingAd> _Nonnull)ad;
- (void)ad:(id <GADFullScreenPresentingAd> _Nonnull)ad didFailToPresentFullScreenContentWithError:(NSError * _Nonnull)error;
- (void)adDidPresentFullScreenContent:(id <GADFullScreenPresentingAd> _Nonnull)ad;
- (void)adWillDismissFullScreenContent:(id <GADFullScreenPresentingAd> _Nonnull)ad;
- (void)adDidDismissFullScreenContent:(id <GADFullScreenPresentingAd> _Nonnull)ad;
@end


SWIFT_PROTOCOL("_TtP6ACNSDK25ACNAdInterstitialDelegate_")
@protocol ACNAdInterstitialDelegate
@optional
/// Called when an interstitial ad request succeeded. Show it at the next transition point in your
/// application such as when transitioning between view controllers.
- (void)interstitialDidReceiveAdWithAd:(ACNAdInterstitial * _Nonnull)ad;
/// Called when an interstitial ad request completed without an interstitial to
/// show. This is common since interstitials are shown sparingly to users.
- (void)interstitial:(ACNAdInterstitial * _Nonnull)_ didFailToReceiveAdWithError:(NSError * _Nonnull)error;
/// Tells the delegate that an impression has been recorded for the ad.
- (void)interstitialDidRecordImpressionWithAd:(ACNAdInterstitial * _Nonnull)ad;
/// Tells the delegate that a click has been recorded for the ad.
- (void)interstitialDidRecordClickWithAd:(ACNAdInterstitial * _Nonnull)ad;
/// Tells the delegate that the ad failed to present full screen content.
- (void)interstitialWithAd:(ACNAdInterstitial * _Nonnull)ad didFailToPresentFullScreenContentWithError:(NSError * _Nonnull)error;
/// Tells the delegate that the ad presented full screen content.
- (void)interstitialDidPresentFullScreenContentWithAd:(ACNAdInterstitial * _Nonnull)ad;
/// Tells the delegate that the ad will dismiss full screen content.
- (void)interstitialWillDismissFullScreenContentWithAd:(ACNAdInterstitial * _Nonnull)ad;
/// Tells the delegate that the ad dismissed full screen content.
- (void)interstitialDidDismissFullScreenContentWithAd:(ACNAdInterstitial * _Nonnull)ad;
@end



SWIFT_CLASS("_TtC6ACNSDK8ACNAdMob")
@interface ACNAdMob : NSObject
/// Initialize the Ads SDK.
/// Sample AdMob app ID: ca-app-pub-3940256099942544~1458002511
+ (void)start;
+ (void)configWithTestDeviceIdentifiers:(NSArray<NSString *> * _Nonnull)testDeviceIdentifiers;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6ACNSDK12ACNAdRequest")
@interface ACNAdRequest : NSObject
+ (ACNAdRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDecimalNumber;

/// Reward information for ACNAdRewardBasedVideoAd ads.
SWIFT_CLASS("_TtC6ACNSDK11ACNAdReward")
@interface ACNAdReward : NSObject
/// Type of the reward.
@property (nonatomic, readonly, copy) NSString * _Nonnull rewardType;
/// Amount rewarded to the user.
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull amount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol ACNAdRewardAdDelegate;

SWIFT_CLASS("_TtC6ACNSDK13ACNAdRewardAd")
@interface ACNAdRewardAd : NSObject
/// Delegate for receiving video notifications.
@property (nonatomic, weak) id <ACNAdRewardAdDelegate> _Nullable delegate;
@property (nonatomic) BOOL isReady;
/// Initiates the request to fetch the reward based video ad. The |request| object supplies ad
/// targeting information and must not be nil. The adUnitID is the ad unit id used for fetching an
/// ad and must not be nil.
- (void)loadRequestWithRequest:(ACNAdRequest * _Nonnull)request;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ACNAdRewardAd (SWIFT_EXTENSION(ACNSDK))
/// Presents the reward based video ad with the provided view controller.
- (void)presentWithRootViewController:(UIViewController * _Nonnull)rootViewController;
@end


@interface ACNAdRewardAd (SWIFT_EXTENSION(ACNSDK)) <GADFullScreenContentDelegate>
- (void)adDidRecordImpression:(id <GADFullScreenPresentingAd> _Nonnull)ad;
- (void)adDidRecordClick:(id <GADFullScreenPresentingAd> _Nonnull)ad;
- (void)ad:(id <GADFullScreenPresentingAd> _Nonnull)ad didFailToPresentFullScreenContentWithError:(NSError * _Nonnull)error;
- (void)adDidPresentFullScreenContent:(id <GADFullScreenPresentingAd> _Nonnull)ad;
- (void)adWillDismissFullScreenContent:(id <GADFullScreenPresentingAd> _Nonnull)ad;
- (void)adDidDismissFullScreenContent:(id <GADFullScreenPresentingAd> _Nonnull)ad;
@end


/// Delegate for receiving state change messages from a ACNAdRewardAd such as ad requests
/// succeeding/failing.
SWIFT_PROTOCOL("_TtP6ACNSDK21ACNAdRewardAdDelegate_")
@protocol ACNAdRewardAdDelegate
@optional
/// Tells the delegate that the reward ad has rewarded the user.
- (void)rewardAd:(ACNAdRewardAd * _Nonnull)_ didRewardUserWithReward:(ACNAdReward * _Nonnull)reward;
/// Tells the delegate that the reward ad failed to load.
- (void)rewardAd:(ACNAdRewardAd * _Nonnull)_ didFailToLoadWithError:(NSError * _Nonnull)error;
/// Tells the delegate that a reward ad was received.
- (void)rewardAdDidReceiveAdWithRewardAd:(ACNAdRewardAd * _Nonnull)rewardAd;
/// Tells the delegate that an impression has been recorded for the ad.
- (void)rewardAdDidRecordImpressionWithRewardAd:(ACNAdRewardAd * _Nonnull)rewardAd;
/// Tells the delegate that the reward clicked.
- (void)rewardAdDidClickedWithRewardAd:(ACNAdRewardAd * _Nonnull)rewardAd;
/// Tells the delegate that the reward ad fail to present.
- (void)rewardAd:(ACNAdRewardAd * _Nonnull)_ didFailToPresentFullScreenContent:(NSError * _Nonnull)error;
/// Tells the delegate that the reward ad did present full screen
- (void)rewardAdDidPresentFullScreenContentWithRewardAd:(ACNAdRewardAd * _Nonnull)rewardAd;
/// Tells the delegate that the reward ad will dismiss full screen.
- (void)rewardWillDismissFullScreenContentWithRewardAd:(ACNAdRewardAd * _Nonnull)rewardAd;
/// Tells the delegate that the reward ad did dismiss full screen.
- (void)rewardAdDidDismissFullScreenContentWithRewardAd:(ACNAdRewardAd * _Nonnull)rewardAd;
@end

typedef SWIFT_ENUM(NSInteger, ACNAdSize, closed) {
  ACNAdSizeBanner = 1,
/// iPhone and iPod Touch ad size. Typically 320x50.
  ACNAdSizeLargeBanner = 2,
/// Taller version of kACNAdSizeBanner. Typically 320x100.
  ACNAdSizeMediumRectangle = 3,
/// Medium Rectangle size for the iPad (especially in a UISplitView’s left pane). Typically 300x250.
  ACNAdSizeFullBanner = 4,
/// Full Banner size for the iPad (especially in a UIPopoverController or in                   /// UIModalPresentationFormSheet). Typically 468x60.
  ACNAdSizeLeaderboard = 5,
/// Leaderboard size for the iPad. Typically 728x90.
  ACNAdSizeFluid = 6,
};


SWIFT_PROTOCOL("_TtP6ACNSDK17ACNAdSizeDelegate_")
@protocol ACNAdSizeDelegate
/// Called before the ad view changes to the new size.
- (void)adViewWillChangeAdSizeWithBannerView:(ACNAdBanner * _Nonnull)bannerView size:(CGSize)size;
@end

typedef SWIFT_ENUM(int32_t, ACNENV, closed) {
  ACNENVDevelop = 1,
  ACNENVProduct = 2,
};

@class ACNSDKError;

SWIFT_CLASS("_TtC6ACNSDK6ACNSDK")
@interface ACNSDK : NSObject
/// Initialize SDK
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     appId: AppId assigned by the ACN platform, cannot be nil
///   </li>
///   <li>
///     secretKey: The SecretKey assigned by the ACN platform cannot be nil
///   </li>
///   <li>
///     scheme: Use the scheme, wallet jump dapp, scheme default is empty, if it is empty, it will not jump.
///   </li>
///   <li>
///     environment: set environment 1 - development 2 - production default=2
///   </li>
///   <li>
///     result:
///   </li>
/// </ul>
+ (void)registerWithAppId:(NSString * _Nonnull)appId secretKey:(NSString * _Nonnull)secretKey environment:(enum ACNENV)environment result:(void (^ _Nullable)(BOOL, ACNSDKError * _Nullable))result;
/// Enable SDK related functions
/// \param isEnabled default is ture
///
+ (void)sdkEnabled:(BOOL)isEnabled;
+ (void)logEnabled:(BOOL)isEnabled;
/// change Value to BigInt
/// eg: ACNSDK.toBigIntString(value: “123.456”, decimal: 18)   ==  “123456000000000000000”
+ (NSString * _Nonnull)toBigIntStringWithValue:(NSString * _Nonnull)value decimal:(NSInteger)decimal SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;

@interface ACNSDK (SWIFT_EXTENSION(ACNSDK))
/// Needs to be used when bind app
/// Call this method in the following methods
/// (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(nullable NSString *)sourceApplication annotation:(id)annotation
/// or
/// (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> *)options
+ (BOOL)handleApplicationWithOpenURL:(NSURL * _Nonnull)openURL;
/// Unbind the wallet that the current user has bound
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     result:
///   </li>
/// </ul>
+ (void)unBindWalletWithResult:(void (^ _Nonnull)(BOOL, ACNSDKError * _Nullable))result;
/// SDK bind wallet and block wallet’s address
+ (void)bindWalletWithIconUrl:(NSString * _Nonnull)iconUrl result:(void (^ _Nonnull)(BOOL, ACNSDKError * _Nullable, NSString * _Nullable))result;
@end

@class ACNUserInfo;

@interface ACNSDK (SWIFT_EXTENSION(ACNSDK))
/// login with userid
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userInfo: User information, only userID is used
///   </li>
///   <li>
///     result:
///   </li>
/// </ul>
+ (void)loginWithUserInfo:(ACNUserInfo * _Nonnull)userInfo result:(void (^ _Nonnull)(BOOL, ACNSDKError * _Nullable, ACNUserInfo * _Nullable))result;
/// Exit current user
+ (void)logout;
/// Update user information
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userInfo: User information, the user information to be updated must be the current user
///   </li>
///   <li>
///     result:
///   </li>
/// </ul>
+ (void)updateUserInfo:(ACNUserInfo * _Nonnull)userInfo result:(void (^ _Nonnull)(BOOL, ACNSDKError * _Nullable, ACNUserInfo * _Nullable))result;
/// Query the balance of current user’s account in Wei units (1 ETH = 10^18 Wei).
/// \param result Return balance
///
+ (void)queryAccountBalanceWithResult:(void (^ _Nonnull)(BOOL, ACNSDKError * _Nullable, NSString * _Nonnull))result;
/// Query the ACN balance of the current user’s wallet in Wei units (1 ETH = 10^18 Wei).
/// \param result Return balance
///
+ (void)queryWalletACNBalanceWithResult:(void (^ _Nonnull)(BOOL, ACNSDKError * _Nullable, NSString * _Nonnull))result;
/// Query the current user’s wallet address
+ (void)getBindWalletAddressWithResult:(void (^ _Nonnull)(BOOL, ACNSDKError * _Nullable, NSString * _Nullable))result;
@end


SWIFT_CLASS("_TtC6ACNSDK11ACNSDKError")
@interface ACNSDKError : NSObject
/// Error number
@property (nonatomic, copy) NSString * _Nonnull code;
/// Error description
@property (nonatomic, copy) NSString * _Nonnull errorDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC6ACNSDK15ACNUploadAction")
@interface ACNUploadAction : NSObject
/// Behavior upload
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     actionType: Behavior Type Must Be Greater Than 100
///   </li>
///   <li>
///     extra: Behavior information, must be spliced into json strings
///   </li>
///   <li>
///     result:
///   </li>
/// </ul>
+ (void)uploadActionWithActionType:(int32_t)actionType extra:(NSString * _Nonnull)extra result:(void (^ _Nullable)(BOOL, ACNSDKError * _Nullable))result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6ACNSDK11ACNUserInfo")
@interface ACNUserInfo : NSObject
/// User ID
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// User Nickname
@property (nonatomic, copy) NSString * _Nullable nickname;
/// Avatar url
@property (nonatomic, copy) NSString * _Nullable avatarUrl;
/// gender   male / female
@property (nonatomic, copy) NSString * _Nullable gender;
/// phone number
@property (nonatomic, copy) NSString * _Nullable telephone;
/// mailbox
@property (nonatomic, copy) NSString * _Nullable email;
/// user’s ACN Address
@property (nonatomic, copy) NSString * _Nullable address;
/// user’s wallet Address
@property (nonatomic, copy) NSString * _Nullable wallet;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
