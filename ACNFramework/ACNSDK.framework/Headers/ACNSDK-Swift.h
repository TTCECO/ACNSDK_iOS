// Generated by Apple Swift version 4.2.1 effective-4.1.50 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Foundation;
@import GoogleMobileAds;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ACNSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIView;
enum ACNAdSize : NSInteger;
@class UIViewController;
@protocol ACNAdBannerDelegate;
@protocol ACNAdSizeDelegate;

/// The view that displays banner ads. A minimum implementation to get an ad from within a
/// UIViewController class is:
SWIFT_CLASS("_TtC6ACNSDK11ACNAdBanner")
@interface ACNAdBanner : NSObject
@property (nonatomic, strong) UIView * _Null_unspecified bannerView;
/// Required value created on the ACNAdMob website. Create a new ad unit for every unique placement of
/// an ad in your application. Set this to the ID assigned for this placement. Ad units are
/// important for targeting and statistics.
/// Example AdMob ad unit ID: @“ca-app-pub-0123456789012345/0123456789”
@property (nonatomic, copy) NSString * _Nullable adUnitID;
/// Required to set this banner view to a proper size. Never create your own GADAdSize directly. Use
/// one of the predefined standard ad sizes (such as kGADAdSizeBanner), or create one using the
/// GADAdSizeFromCGSize method. If not using mediation, then changing the adSize after an ad has
/// been shown will cause a new request (for an ad of the new size) to be sent. If using mediation,
/// then a new request may not be sent.
@property (nonatomic) enum ACNAdSize adSize;
/// Required reference to the root view controller for the banner view. This is the view controller
/// the banner will present from if necessary (for example, presenting a landing page after a user
/// click). Most commonly, this is the view controller the banner is displayed in.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
/// Optional delegate object that receives state change notifications from this ACNBanner.
/// Typically this is a UIViewController.
@property (nonatomic, weak) id <ACNAdBannerDelegate> _Nullable delegate;
/// Optional delegate that is notified when creatives cause the banner to change size.
@property (nonatomic, weak) id <ACNAdSizeDelegate> _Nullable adSizeDelegate;
/// init
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// init with asSize
- (nonnull instancetype)initWithAdSize:(enum ACNAdSize)adSize;
/// init with asSize and origin
- (nonnull instancetype)initWithAdSize:(enum ACNAdSize)adSize origin:(CGPoint)origin OBJC_DESIGNATED_INITIALIZER;
@end

@class GADBannerView;

@interface ACNAdBanner (SWIFT_EXTENSION(ACNSDK)) <GADAdSizeDelegate>
/// Called before the ad view changes to the new size.
- (void)adView:(GADBannerView * _Nonnull)bannerView willChangeAdSizeTo:(GADAdSize)size;
@end

@class ACNAdRequest;

SWIFT_PROTOCOL("_TtP6ACNSDK17ACNAdLoadProtocol_")
@protocol ACNAdLoadProtocol
- (void)loadRequestWithRequset:(ACNAdRequest * _Nonnull)requset;
@end


@interface ACNAdBanner (SWIFT_EXTENSION(ACNSDK)) <ACNAdLoadProtocol>
/// Makes an ad request. The request object supplies targeting information.
- (void)loadRequestWithRequset:(ACNAdRequest * _Nonnull)requset;
@end

@class GADRequestError;

@interface ACNAdBanner (SWIFT_EXTENSION(ACNSDK)) <GADBannerViewDelegate>
/// Tells the delegate that an ad request successfully received an ad. The delegate may want to add
/// the banner view to the view hierarchy if it hasn’t been added yet.
- (void)adViewDidReceiveAd:(GADBannerView * _Nonnull)bannerView;
/// Tells the delegate that an ad request failed. The failure is normally due to network
/// connectivity or ad availablility (i.e., no fill).
- (void)adView:(GADBannerView * _Nonnull)bannerView didFailToReceiveAdWithError:(GADRequestError * _Nonnull)error;
/// Tells the delegate that a full screen view will be presented in response to the user clicking on
/// an ad. The delegate may want to pause animations and time sensitive interactions.
- (void)adViewWillPresentScreen:(GADBannerView * _Nonnull)bannerView;
/// Tells the delegate that the full screen view will be dismissed.
- (void)adViewWillDismissScreen:(GADBannerView * _Nonnull)bannerView;
/// Tells the delegate that the full screen view has been dismissed. The delegate should restart
/// anything paused while handling adViewWillPresentScreen:.
- (void)adViewDidDismissScreen:(GADBannerView * _Nonnull)bannerView;
/// Tells the delegate that the user click will open another app, backgrounding the current
/// application. The standard UIApplicationDelegate methods, like applicationDidEnterBackground:,
/// are called immediately before this method is called.
- (void)adViewWillLeaveApplication:(GADBannerView * _Nonnull)bannerView;
@end


SWIFT_PROTOCOL("_TtP6ACNSDK19ACNAdBannerDelegate_")
@protocol ACNAdBannerDelegate
@optional
/// Tells the delegate that an ad request successfully received an ad. The delegate may want to add
/// the banner view to the view hierarchy if it hasn’t been added yet.
- (void)adViewDidReceiveAd:(ACNAdBanner * _Nonnull)banner;
/// Tells the delegate that an ad request failed. The failure is normally due to network
/// connectivity or ad availablility (i.e., no fill).
- (void)adViewDidFailToReceiveAdWithBanner:(ACNAdBanner * _Nonnull)banner error:(NSError * _Nonnull)error;
/// Tells the delegate that a full screen view will be presented in response to the user clicking on
/// an ad. The delegate may want to pause animations and time sensitive interactions.
- (void)adViewWillPresentScreenWithBanner:(ACNAdBanner * _Nonnull)banner;
/// Tells the delegate that the full screen view will be dismissed.
- (void)adViewWillDismissScreenWithBanner:(ACNAdBanner * _Nonnull)banner;
/// Tells the delegate that the full screen view has been dismissed. The delegate should restart
/// anything paused while handling adViewWillPresentScreen:.
- (void)adViewDidDismissScreenWithBanner:(ACNAdBanner * _Nonnull)banner;
/// Tells the delegate that the user click will open another app, backgrounding the current
/// application. The standard UIApplicationDelegate methods, like applicationDidEnterBackground:,
/// are called immediately before this method is called.
- (void)adViewWillLeaveApplicationWithBanner:(ACNAdBanner * _Nonnull)banner;
@end

@protocol ACNAdInterstitialDelegate;

SWIFT_CLASS("_TtC6ACNSDK17ACNAdInterstitial")
@interface ACNAdInterstitial : NSObject
/// Initializes an interstitial with an ad unit created on the AdMob website. Create a new ad unit
/// for every unique placement of an ad in your application. Set this to the ID assigned for this
/// placement. Ad units are important for targeting and statistics.
/// Example AdMob ad unit ID: @“ca-app-pub-0123456789012345/0123456789”
- (nonnull instancetype)initWithAdUnitID:(NSString * _Nonnull)adUnitID OBJC_DESIGNATED_INITIALIZER;
/// Required value created on the ACNAdMob website. Create a new ad unit for every unique placement of
/// an ad in your application. Set this to the ID assigned for this placement. Ad units are
/// important for targeting and statistics.
/// Example AdMob ad unit ID: @“ca-app-pub-0123456789012345/0123456789”
@property (nonatomic, readonly, copy) NSString * _Nullable adUnitID;
/// Optional delegate object that receives state change notifications from this GADInterstitalAd.
@property (nonatomic, weak) id <ACNAdInterstitialDelegate> _Nullable delegate;
/// Returns YES if the interstitial is ready to be displayed. The delegate’s
/// interstitialAdDidReceiveAd: will be called after this property switches from NO to YES.
@property (nonatomic, readonly) BOOL isReady;
/// Returns YES if this object has already been presented. Interstitial objects can only be used
/// once even with different requests.
@property (nonatomic, readonly) BOOL hasBeenUsed;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface ACNAdInterstitial (SWIFT_EXTENSION(ACNSDK))
/// Presents the interstitial ad which takes over the entire screen until the user dismisses it.
/// This has no effect unless isReady returns YES and/or the delegate’s interstitialDidReceiveAd:
/// has been received.
/// Set rootViewController to the current view controller at the time this method is called. If your
/// application does not use view controllers pass in nil and your views will be removed from the
/// window to show the interstitial and restored when done. After the interstitial has been removed,
/// the delegate’s interstitialDidDismissScreen: will be called.
- (void)presentWithRootViewController:(UIViewController * _Nonnull)rootViewController;
@end


@interface ACNAdInterstitial (SWIFT_EXTENSION(ACNSDK)) <ACNAdLoadProtocol>
/// Makes an interstitial ad request. Additional targeting options can be supplied with a request
/// object. Only one interstitial request is allowed at a time.
/// This is best to do several seconds before the interstitial is needed to preload its content.
/// Then when transitioning between view controllers show the interstital with
/// presentFromViewController.
- (void)loadRequestWithRequset:(ACNAdRequest * _Nonnull)requset;
@end

@class GADInterstitial;

@interface ACNAdInterstitial (SWIFT_EXTENSION(ACNSDK)) <GADInterstitialDelegate>
- (void)interstitialDidReceiveAd:(GADInterstitial * _Nonnull)ad;
- (void)interstitial:(GADInterstitial * _Nonnull)ad didFailToReceiveAdWithError:(GADRequestError * _Nonnull)error;
- (void)interstitialWillPresentScreen:(GADInterstitial * _Nonnull)ad;
- (void)interstitialDidFailToPresentScreen:(GADInterstitial * _Nonnull)ad;
- (void)interstitialWillDismissScreen:(GADInterstitial * _Nonnull)ad;
- (void)interstitialDidDismissScreen:(GADInterstitial * _Nonnull)ad;
- (void)interstitialWillLeaveApplication:(GADInterstitial * _Nonnull)ad;
@end


SWIFT_PROTOCOL("_TtP6ACNSDK25ACNAdInterstitialDelegate_")
@protocol ACNAdInterstitialDelegate
@optional
/// Called when an interstitial ad request succeeded. Show it at the next transition point in your
/// application such as when transitioning between view controllers.
- (void)interstitialDidReceiveAdWithAd:(ACNAdInterstitial * _Nonnull)ad;
/// Called when an interstitial ad request completed without an interstitial to
/// show. This is common since interstitials are shown sparingly to users.
- (void)interstitialDidFailToReceiveAdWithErrorWithAd:(ACNAdInterstitial * _Nonnull)ad error:(NSError * _Nonnull)error;
/// Called just before presenting an interstitial. After this method finishes the interstitial will
/// animate onto the screen. Use this opportunity to stop animations and save the state of your
/// application in case the user leaves while the interstitial is on screen (e.g. to visit the App
/// Store from a link on the interstitial).
- (void)interstitialWillPresentScreenWithAd:(ACNAdInterstitial * _Nonnull)ad;
/// Called when |ad| fails to present.
- (void)interstitialDidFailToPresentScreenWithAd:(ACNAdInterstitial * _Nonnull)ad;
/// Called before the interstitial is to be animated off the screen.
- (void)interstitialWillDismissScreenWithAd:(ACNAdInterstitial * _Nonnull)ad;
/// Called just after dismissing an interstitial and it has animated off the screen.
- (void)interstitialDidDismissScreenWithAd:(ACNAdInterstitial * _Nonnull)ad;
/// Called just before the application will background or terminate because the user clicked on an
/// ad that will launch another application (such as the App Store). The normal
/// UIApplicationDelegate methods, like applicationDidEnterBackground:, will be called immediately
/// before this.
- (void)interstitialWillLeaveApplicationWithAd:(ACNAdInterstitial * _Nonnull)ad;
@end



SWIFT_CLASS("_TtC6ACNSDK8ACNAdMob")
@interface ACNAdMob : NSObject
/// Returns the shared ACNAdMob instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ACNAdMob * _Nonnull sharedInstance;)
+ (ACNAdMob * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Initialize the Ads SDK.
/// Sample AdMob app ID: ca-app-pub-3940256099942544~1458002511
+ (void)configureWithAppID:(NSString * _Nonnull)appID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSArray;

SWIFT_CLASS("_TtC6ACNSDK12ACNAdRequest")
@interface ACNAdRequest : NSObject
+ (ACNAdRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) NSArray * _Nullable testDevices;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDecimalNumber;

/// Reward information for ACNAdRewardBasedVideoAd ads.
SWIFT_CLASS("_TtC6ACNSDK11ACNAdReward")
@interface ACNAdReward : NSObject
/// Type of the reward.
@property (nonatomic, readonly, copy) NSString * _Nullable rewardType;
/// Amount rewarded to the user.
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable amount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol ACNAdRewardBasedVideoAdDelegate;

SWIFT_CLASS("_TtC6ACNSDK23ACNAdRewardBasedVideoAd")
@interface ACNAdRewardBasedVideoAd : NSObject
/// Returns the shared ACNAdRewardBasedVideoAd instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ACNAdRewardBasedVideoAd * _Nonnull sharedInstance;)
+ (ACNAdRewardBasedVideoAd * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Delegate for receiving video notifications.
@property (nonatomic, weak) id <ACNAdRewardBasedVideoAdDelegate> _Nullable delegate;
/// Indicates if the receiver is ready to be presented full screen.
@property (nonatomic, readonly) BOOL isReady;
/// A unique identifier used to identify the user when making server-to-server reward callbacks.
/// This value is used at both request time and during ad display. New values must only be set
/// before ad requests.
@property (nonatomic, copy) NSString * _Nullable userIdentifier;
/// Optional custom reward string to include in the server-to-server callback.
@property (nonatomic, copy) NSString * _Nullable customRewardString;
@end


@interface ACNAdRewardBasedVideoAd (SWIFT_EXTENSION(ACNSDK))
/// Presents the reward based video ad with the provided view controller.
- (void)presentWithRootViewController:(UIViewController * _Nonnull)rootViewController;
@end


@interface ACNAdRewardBasedVideoAd (SWIFT_EXTENSION(ACNSDK))
/// Initiates the request to fetch the reward based video ad. The |request| object supplies ad
/// targeting information and must not be nil. The adUnitID is the ad unit id used for fetching an
/// ad and must not be nil.
- (void)loadRequestWithRequest:(ACNAdRequest * _Nonnull)request adUnitID:(NSString * _Nonnull)adUnitID;
@end

@class GADRewardBasedVideoAd;
@class GADAdReward;

@interface ACNAdRewardBasedVideoAd (SWIFT_EXTENSION(ACNSDK)) <GADRewardBasedVideoAdDelegate>
- (void)rewardBasedVideoAd:(GADRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd didRewardUserWithReward:(GADAdReward * _Nonnull)reward;
- (void)rewardBasedVideoAd:(GADRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd didFailToLoadWithError:(NSError * _Nonnull)error;
- (void)rewardBasedVideoAdDidReceiveAd:(GADRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd;
- (void)rewardBasedVideoAdDidOpen:(GADRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd;
- (void)rewardBasedVideoAdDidStartPlaying:(GADRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd;
- (void)rewardBasedVideoAdDidCompletePlaying:(GADRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd;
- (void)rewardBasedVideoAdDidClose:(GADRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd;
- (void)rewardBasedVideoAdWillLeaveApplication:(GADRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd;
@end


/// Delegate for receiving state change messages from a ACNAdRewardBasedVideoAd such as ad requests
/// succeeding/failing.
SWIFT_PROTOCOL("_TtP6ACNSDK31ACNAdRewardBasedVideoAdDelegate_")
@protocol ACNAdRewardBasedVideoAdDelegate
/// Tells the delegate that the reward based video ad has rewarded the user.
- (void)rewardBasedVideoAdWithRewardBasedVideoAd:(ACNAdRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd didRewardUserWithReward:(ACNAdReward * _Nonnull)reward;
@optional
/// Tells the delegate that the reward based video ad failed to load.
- (void)rewardBasedVideoAdWithRewardBasedVideoAd:(ACNAdRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd didFailToLoadWithError:(NSError * _Nonnull)error;
/// Tells the delegate that a reward based video ad was received.
- (void)rewardBasedVideoAdDidReceiveAdWithRewardBasedVideoAd:(ACNAdRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd;
/// Tells the delegate that the reward based video ad opened.
- (void)rewardBasedVideoAdDidOpenWithRewardBasedVideoAd:(ACNAdRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd;
/// Tells the delegate that the reward based video ad started playing.
- (void)rewardBasedVideoAdDidStartPlayingWithRewardBasedVideoAd:(ACNAdRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd;
/// Tells the delegate that the reward based video ad completed playing.
- (void)rewardBasedVideoAdDidCompletePlayingWithRewardBasedVideoAd:(ACNAdRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd;
/// Tells the delegate that the reward based video ad closed.
- (void)rewardBasedVideoAdDidCloseWithRewardBasedVideoAd:(ACNAdRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd;
/// Tells the delegate that the reward based video ad will leave the application.
- (void)rewardBasedVideoAdWillLeaveApplicationWithRewardBasedVideoAd:(ACNAdRewardBasedVideoAd * _Nonnull)rewardBasedVideoAd;
@end

typedef SWIFT_ENUM(NSInteger, ACNAdSize, closed) {
  ACNAdSizeBanner = 1,
/// iPhone and iPod Touch ad size. Typically 320x50.
  ACNAdSizeLargeBanner = 2,
/// Taller version of kACNAdSizeBanner. Typically 320x100.
  ACNAdSizeMediumRectangle = 3,
/// Medium Rectangle size for the iPad (especially in a UISplitView’s left pane). Typically 300x250.
  ACNAdSizeFullBanner = 4,
/// Full Banner size for the iPad (especially in a UIPopoverController or in                   /// UIModalPresentationFormSheet). Typically 468x60.
  ACNAdSizeLeaderboard = 5,
/// Leaderboard size for the iPad. Typically 728x90.
  ACNAdSizeFluid = 6,
};


SWIFT_PROTOCOL("_TtP6ACNSDK17ACNAdSizeDelegate_")
@protocol ACNAdSizeDelegate
/// Called before the ad view changes to the new size.
- (void)adViewWillChangeAdSizeWithBannerView:(ACNAdBanner * _Nonnull)bannerView size:(CGSize)size;
@end

@class ACNSDKError;

SWIFT_CLASS("_TtC6ACNSDK6ACNSDK")
@interface ACNSDK : NSObject
/// Initialize SDK
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     appId: AppId assigned by the ACN platform, cannot be nil
///   </li>
///   <li>
///     secretKey: The SecretKey assigned by the ACN platform cannot be nil
///   </li>
///   <li>
///     scheme: Use the scheme, wallet jump dapp, scheme default is empty, if it is empty, it will not jump.
///   </li>
///   <li>
///     environment: set environment 1 - development 2 - production default=2
///   </li>
///   <li>
///     result:
///   </li>
/// </ul>
+ (void)registerWithAppId:(NSString * _Nonnull)appId secretKey:(NSString * _Nonnull)secretKey environment:(NSInteger)environment result:(void (^ _Nullable)(BOOL, ACNSDKError * _Nullable))result;
/// Enable SDK related functions
/// \param isEnabled default is ture
///
+ (void)sdkEnabled:(BOOL)isEnabled;
+ (void)logEnabled:(BOOL)isEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ACNSDK (SWIFT_EXTENSION(ACNSDK))
/// Needs to be used when bind app
/// Call this method in the following methods
/// (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(nullable NSString *)sourceApplication annotation:(id)annotation
/// or
/// (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> *)options
+ (BOOL)handleApplicationWithOpenURL:(NSURL * _Nonnull)openURL;
/// Unbind the wallet that the current user has bound
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     result:
///   </li>
/// </ul>
+ (void)unBindWalletWithResult:(void (^ _Nonnull)(BOOL, ACNSDKError * _Nullable))result;
@end

@class ACNUserInfo;

@interface ACNSDK (SWIFT_EXTENSION(ACNSDK))
/// login with userid
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userInfo: User information, only userID is used
///   </li>
///   <li>
///     result:
///   </li>
/// </ul>
+ (void)loginWithUserInfo:(ACNUserInfo * _Nonnull)userInfo result:(void (^ _Nonnull)(BOOL, ACNSDKError * _Nullable, ACNUserInfo * _Nullable))result;
/// Exit current user
+ (void)logout;
/// Update user information
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userInfo: User information, the user information to be updated must be the current user
///   </li>
///   <li>
///     result:
///   </li>
/// </ul>
+ (void)updateUserInfo:(ACNUserInfo * _Nonnull)userInfo result:(void (^ _Nonnull)(BOOL, ACNSDKError * _Nullable, ACNUserInfo * _Nullable))result;
/// Query the balance of current user’s account
/// \param result Return balance
///
+ (void)queryAccountBalanceWithResult:(void (^ _Nonnull)(BOOL, ACNSDKError * _Nullable, NSString * _Nonnull))result;
/// Query the balance of the current user’s wallet
/// \param result Return balance
///
+ (void)queryWalletBalanceWithResult:(void (^ _Nonnull)(BOOL, ACNSDKError * _Nullable, NSString * _Nonnull))result;
@end


SWIFT_CLASS("_TtC6ACNSDK11ACNSDKError")
@interface ACNSDKError : NSObject
/// Error number
@property (nonatomic, copy) NSString * _Nonnull code;
/// Error description
@property (nonatomic, copy) NSString * _Nonnull errorDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC6ACNSDK15ACNUploadAction")
@interface ACNUploadAction : NSObject
/// Behavior upload
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     actionType: Behavior Type Must Be Greater Than 100
///   </li>
///   <li>
///     extra: Behavior information, must be spliced into json strings
///   </li>
///   <li>
///     result:
///   </li>
/// </ul>
+ (void)uploadActionWithActionType:(int32_t)actionType extra:(NSString * _Nonnull)extra result:(void (^ _Nullable)(BOOL, ACNSDKError * _Nullable))result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6ACNSDK11ACNUserInfo")
@interface ACNUserInfo : NSObject
/// User ID
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// User Nickname
@property (nonatomic, copy) NSString * _Nullable nickname;
/// Avatar url
@property (nonatomic, copy) NSString * _Nullable avatarUrl;
/// gender   male / female
@property (nonatomic, copy) NSString * _Nullable gender;
/// phone number
@property (nonatomic, copy) NSString * _Nullable telephone;
/// mailbox
@property (nonatomic, copy) NSString * _Nullable email;
/// user’s ACN Address
@property (nonatomic, copy) NSString * _Nullable address;
/// user’s wallet Address
@property (nonatomic, copy) NSString * _Nullable wallet;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
